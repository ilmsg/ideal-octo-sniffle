// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: store.sql

package ideal

import (
	"context"
	"database/sql"
)

const createStore = `-- name: CreateStore :execresult
INSERT INTO
    stores (title, description, userId)
VALUES
    (?, ?, ?)
`

type CreateStoreParams struct {
	Title       string
	Description string
	Userid      int64
}

func (q *Queries) CreateStore(ctx context.Context, arg CreateStoreParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createStore, arg.Title, arg.Description, arg.Userid)
}

const deleteStore = `-- name: DeleteStore :exec
DELETE FROM stores
WHERE
    id = ?
`

func (q *Queries) DeleteStore(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteStore, id)
	return err
}

const getStore = `-- name: GetStore :one
SELECT
    id, title, description, userid
FROM
    stores
WHERE
    id = ?
LIMIT
    1
`

func (q *Queries) GetStore(ctx context.Context, id int64) (Store, error) {
	row := q.db.QueryRowContext(ctx, getStore, id)
	var i Store
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Userid,
	)
	return i, err
}

const listStores = `-- name: ListStores :many
SELECT
    id, title, description, userid
FROM
    stores
ORDER By
    id
`

func (q *Queries) ListStores(ctx context.Context) ([]Store, error) {
	rows, err := q.db.QueryContext(ctx, listStores)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Store
	for rows.Next() {
		var i Store
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Userid,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listStoresByUserId = `-- name: ListStoresByUserId :many
SELECT
    id, title, description, userid
FROM
    stores
WHERE
    userId = ?
ORDER By
    id
`

func (q *Queries) ListStoresByUserId(ctx context.Context, userid int64) ([]Store, error) {
	rows, err := q.db.QueryContext(ctx, listStoresByUserId, userid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Store
	for rows.Next() {
		var i Store
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Userid,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateStore = `-- name: UpdateStore :exec
UPDATE stores
SET
    title = ?,
    description = ?,
    userId = ?
WHERE
    id = ?
`

type UpdateStoreParams struct {
	Title       string
	Description string
	Userid      int64
	ID          int64
}

func (q *Queries) UpdateStore(ctx context.Context, arg UpdateStoreParams) error {
	_, err := q.db.ExecContext(ctx, updateStore,
		arg.Title,
		arg.Description,
		arg.Userid,
		arg.ID,
	)
	return err
}
